package main



type RESTBenchCheck struct {
	TestNum     string   `json:"test_number"`
	Category    string   `json:"category"`
	Type        string   `json:"type"`
	Profile     string   `json:"profile"`
	Scored      bool     `json:"scored"`
	Automated   bool     `json:"automated"`
	Description string   `json:"description"`
	Remediation string   `json:"remediation"`
	Tags        []string `json:"tags"`
}



var cis_items = map[string]RESTBenchCheck{
	"D.1.1.1": RESTBenchCheck{
		TestNum:     "D.1.1.1",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保已为容器创建单独的分区",
		Remediation: "对于新安装，您应该为 /var/lib/docker 安装点创建一个单独的分区。对于已经安装的系统，您应该使用 Linux 中的逻辑卷管理器 (LVM) 创建一个新分区。",
	},

	"D.1.1.2": RESTBenchCheck{
		TestNum:     "D.1.1.2",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保只允许受信任的用户控制 Docker 守护进程",
		Remediation: "您应该使用命令 sudo gpasswd -d <your-user> docker 从 docker 组中删除任何不受信任的用户，或者使用命令 sudo usermod -aG docker <your-user> 将受信任的用户添加到 docker 组。您不应创建从主机到容器卷的敏感目录映射。",
	},

	"D.1.1.3": RESTBenchCheck{
		TestNum:     "D.1.1.3",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保为 Docker 守护进程配置审计",
		Remediation: "安装 auditd。将 -w /usr/bin/dockerd -k docker 添加到 /etc/audit/rules.d/audit.rules 文件。然后使用命令 service auditd restart 重新启动审计守护进程。",
	},

	"D.1.1.4": RESTBenchCheck{
		TestNum:     "D.1.1.4",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保为 Docker 文件和目录配置审计 - /run/containerd",
		Remediation: "安装 auditd。添加 -a exit,always -F path=/run/containerd -F perm=war -k docker 到 /etc/audit/rules.d/audit.rules 文件。然后使用命令 service auditd restart 重新启动审计守护进程。",
	},

	"D.1.1.5": RESTBenchCheck{
		TestNum:     "D.1.1.5",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保为 Docker 文件和目录配置了审计 - /var/lib/docker",
		Remediation: "安装 auditd。将 -w /var/lib/docker -k docker 添加到 /etc/audit/rules.d/audit.rules 文件。然后使用命令 service auditd restart 重新启动审计守护进程。",
	},

	"D.1.1.6": RESTBenchCheck{
		TestNum:     "D.1.1.6",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保为 Docker 文件和目录配置了审计 - /etc/docker",
		Remediation: "安装 auditd。将 -w /etc/docker -k docker 添加到 /etc/audit/rules.d/audit.rules 文件。然后使用命令 service auditd restart 重新启动审计守护进程。",
	},

	"D.1.1.7": RESTBenchCheck{
		TestNum:     "D.1.1.7",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保为 Docker 文件和目录配置审计 - docker.service",
		Remediation: "安装 auditd。添加 -w $(get_service_file docker.service) -k docker 到 /etc/audit/rules.d/audit.rules 文件。然后使用命令 service auditd restart 重新启动审计守护进程。",
	},

	"D.1.1.8": RESTBenchCheck{
		TestNum:     "D.1.1.8",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保为 Docker 文件和目录配置审计 - containerd.sock",
		Remediation: "安装 auditd。添加 -w $(get_service_file containerd.socket) -k docker 到 /etc/audit/rules.d/audit.rules 文件。然后使用命令 service auditd restart 重新启动审计守护进程。",
	},

	"D.1.1.9": RESTBenchCheck{
		TestNum:     "D.1.1.9",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保为 Docker 文件和目录配置审计 - docker.socket",
		Remediation: "安装 auditd。添加 -w $(get_service_file docker.socket) -k docker 到 /etc/audit/rules.d/audit.rules 文件。然后使用命令 service auditd restart 重新启动审计守护进程。",
	},

	"D.1.1.10": RESTBenchCheck{
		TestNum:     "D.1.1.10",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保为 Docker 文件和目录配置审计 - /etc/default/docker",
		Remediation: "安装 auditd。将 -w /etc/default/docker -k docker 添加到 /etc/audit/rules.d/audit.rules 文件。然后使用命令 service auditd restart 重新启动审计守护进程。",
	},

	"D.1.1.11": RESTBenchCheck{
		TestNum:     "D.1.1.11",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保为 Dockerfiles 和目录配置审计 - /etc/docker/daemon.json",
		Remediation: "安装 auditd。添加 -w /etc/docker/daemon.json -k docker 到 /etc/audit/rules.d/audit.rules 文件。然后使用命令 service auditd restart 重新启动审计守护进程。",
	},

	"D.1.1.12": RESTBenchCheck{
		TestNum:     "D.1.1.12",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保为 Dockerfiles 和目录配置审计 - /etc/containerd/config.toml",
		Remediation: "安装 auditd。将 -w /etc/containerd/config.toml -k docker 添加到 /etc/audit/rules.d/audit.rules 文件。然后使用命令 service auditd restart 重新启动审计守护进程。",
	},

	"D.1.1.13": RESTBenchCheck{
		TestNum:     "D.1.1.13",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保为 Docker 文件和目录配置审计 - /etc/sysconfig/docker",
		Remediation: "安装 auditd。将 -w /etc/sysconfig/docker -k docker 添加到 /etc/audit/rules.d/audit.rules 文件。然后使用命令 service auditd restart 重新启动审计守护进程。",
	},

	"D.1.1.14": RESTBenchCheck{
		TestNum:     "D.1.1.14",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保为 Docker 文件和目录配置审计 - /usr/bin/containerd",
		Remediation: "安装 auditd。将 -w /usr/bin/containerd -k docker 添加到 /etc/audit/rules.d/audit.rules 文件。然后使用命令 service auditd restart 重新启动审计守护进程。",
	},

	"D.1.1.15": RESTBenchCheck{
		TestNum:     "D.1.1.15",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保为 Docker 文件和目录配置审计 - /usr/bin/containerd-shim",
		Remediation: "安装 auditd。将 -w /usr/bin/containerd-shim -k docker 添加到 /etc/audit/rules.d/audit.rules 文件。然后使用命令 service auditd restart 重新启动审计守护进程。",
	},

	"D.1.1.16": RESTBenchCheck{
		TestNum:     "D.1.1.16",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保为 Docker 文件和目录配置审计 - /usr/bin/containerd-shim-runc-v1",
		Remediation: "安装 auditd。将 -w /usr/bin/containerd-shim-runc-v1 -k docker 添加到 /etc/audit/rules.d/audit.rules 文件。然后使用命令 service auditd restart 重新启动审计守护进程。",
	},

	"D.1.1.17": RESTBenchCheck{
		TestNum:     "D.1.1.17",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保为 Docker 文件和目录配置审计 - /usr/bin/containerd-shim-runc-v2",
		Remediation: "安装 auditd。将 -w /usr/bin/containerd-shim-runc-v2 -k docker 添加到 /etc/audit/rules.d/audit.rules 文件。然后使用命令 service auditd restart 重新启动审计守护进程。",
	},

	"D.1.1.18": RESTBenchCheck{
		TestNum:     "D.1.1.18",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保为 Docker 文件和目录配置审计 - /usr/bin/runc",
		Remediation: "安装 auditd。将 -w /usr/bin/runc -k docker 添加到 /etc/audit/rules.d/audit.rules 文件。然后使用命令 service auditd restart 重新启动审计守护进程。",
	},

	"D.1.2.1": RESTBenchCheck{
		TestNum:     "D.1.2.1",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保容器主机已被强化`",
		Remediation: "您可以为您的容器主机考虑各种安全基准。",
	},

	"D.1.2.2": RESTBenchCheck{
		TestNum:     "D.1.2.2",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 Docker 的版本是最新的",
		Remediation: "您应该监控 Docker 版本并确保您的软件按要求更新。",
	},

	"D.2.1": RESTBenchCheck{
		TestNum:     "D.2.1",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "如果可能，以非 root 用户身份运行 Docker 守护进程",
		Remediation: "按照当前的 Docker 文档了解如何以非根用户身份安装 Docker 守护进程。",
	},

	"D.2.2": RESTBenchCheck{
		TestNum:     "D.2.2",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保网络流量在默认网桥上的容器之间受到限制",
		Remediation: "编辑 Docker 守护程序配置文件以确保禁用容器间通信：icc: false。",
	},

	"D.2.3": RESTBenchCheck{
		TestNum:     "D.2.3",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保日志记录级别设置为“信息”",
		Remediation: "确保 Docker 守护程序配置文件具有以下配置，包括日志级别：信息。或者，按以下方式运行 Docker 守护进程：dockerd --log-level=info",
	},

	"D.2.4": RESTBenchCheck{
		TestNum:     "D.2.4",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保允许 Docker 对 iptables 进行更改",
		Remediation: "不要使用 --iptables=false 选项运行 Docker 守护进程。",
	},

	"D.2.5": RESTBenchCheck{
		TestNum:     "D.2.5",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保不使用不安全的注册表",
		Remediation: "您应该确保没有使用不安全的注册表。",
	},

	"D.2.6": RESTBenchCheck{
		TestNum:     "D.2.6",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保未使用 aufs 存储驱动程序",
		Remediation: "不要使用 dockerd --storage-driver aufs 选项启动 Docker 守护进程。",
	},

	"D.2.7": RESTBenchCheck{
		TestNum:     "D.2.7",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保配置了 Docker 守护进程的 TLS 身份验证",
		Remediation: "按照 Docker 文档或其他参考资料中提到的步骤进行操作。缺省情况下，没有配置 TLS 认证。",
	},

	"D.2.8": RESTBenchCheck{
		TestNum:     "D.2.8",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保默认的 ulimit 配置正确",
		Remediation: "在守护程序模式下运行 Docker，并根据您的环境并根据您的安全策略将 --default-ulimit 作为选项与相应的 ulimit 一起传递。示例：dockerd --default-ulimit nproc=1024:2048 --default-ulimit nofile=100:200",
	},

	"D.2.9": RESTBenchCheck{
		TestNum:     "D.2.9",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 2",
		Automated:   false,
		Description: "启用用户命名空间支持",
		Remediation: "",
	},

	"D.2.10": RESTBenchCheck{
		TestNum:     "D.2.10",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保已确认默认 cgroup 使用情况",
		Remediation: "",
	},

	"D.2.11": RESTBenchCheck{
		TestNum:     "D.2.11",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保基本设备大小在需要之前不会更改",
		Remediation: "",
	},

	"D.2.12": RESTBenchCheck{
		TestNum:     "D.2.12",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保启用对 Docker 客户端命令的授权",
		Remediation: "",
	},

	"D.2.13": RESTBenchCheck{
		TestNum:     "D.2.13",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保配置了集中和远程日志记录",
		Remediation: "",
	},

	"D.2.14": RESTBenchCheck{
		TestNum:     "D.2.14",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保限制容器获取新权限",
		Remediation: "您应该使用命令运行 Docker 守护进程：dockerd --no-new-privileges",
	},

	"D.2.15": RESTBenchCheck{
		TestNum:     "D.2.15",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保启用实时还原",
		Remediation: "以守护进程模式运行 Docker 并传递 --live-restore 选项。",
	},

	"D.2.16": RESTBenchCheck{
		TestNum:     "D.2.16",
		Type:        "host",
		Category:    "docker",
		Scored:      false,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保禁用 Userland 代理",
		Remediation: "您应该使用命令运行 Docker 守护进程：dockerd --userland-proxy=false",
	},

	"D.2.17": RESTBenchCheck{
		TestNum:     "D.2.17",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保在适当的情况下应用守护程序范围的自定义 seccomp 配置文件",
		Remediation: "默认情况下，应用 Docker 的默认 seccomp 配置文件。如果这足以满足您的环境，则无需执行任何操作。",
	},

	"D.2.18": RESTBenchCheck{
		TestNum:     "D.2.18",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保实验性功能未在生产中实施",
		Remediation: "您不应将 --experimental 作为运行时参数传递给生产系统上的 Docker 守护程序。",
	},

	"D.3.1": RESTBenchCheck{
		TestNum:     "D.3.1",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 docker.service 文件所有权设置为 root:root",
		Remediation: "",
	},

	"D.3.2": RESTBenchCheck{
		TestNum:     "D.3.2",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保正确设置 docker.service 文件权限",
		Remediation: "",
	},

	"D.3.3": RESTBenchCheck{
		TestNum:     "D.3.3",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 docker.socket 文件所有权设置为 root:root",
		Remediation: "",
	},

	"D.3.4": RESTBenchCheck{
		TestNum:     "D.3.4",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 docker.socket 文件权限设置为 644 或更多限制",
		Remediation: "",
	},

	"D.3.5": RESTBenchCheck{
		TestNum:     "D.3.5",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 /etc/docker 目录所有权设置为 root:root",
		Remediation: "",
	},

	"D.3.6": RESTBenchCheck{
		TestNum:     "D.3.6",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 /etc/docker 目录权限设置为 755 或更严格",
		Remediation: "",
	},

	"D.3.7": RESTBenchCheck{
		TestNum:     "D.3.7",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保注册表证书文件所有权设置为 root:root",
		Remediation: "",
	},

	"D.3.8": RESTBenchCheck{
		TestNum:     "D.3.8",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保注册表证书文件权限设置为 444 或更多限制",
		Remediation: "",
	},

	"D.3.9": RESTBenchCheck{
		TestNum:     "D.3.9",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 TLS CA 证书文件所有权设置为 root:root",
		Remediation: "",
	},

	"D.3.10": RESTBenchCheck{
		TestNum:     "D.3.10",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 TLS CA 证书文件权限设置为 444 或更多限制",
		Remediation: "",
	},

	"D.3.11": RESTBenchCheck{
		TestNum:     "D.3.11",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 Docker 服务器证书文件所有权设置为 root:root",
		Remediation: "",
	},

	"D.3.12": RESTBenchCheck{
		TestNum:     "D.3.12",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 Docker 服务器证书文件权限设置为 444 或更多限制",
		Remediation: "",
	},

	"D.3.13": RESTBenchCheck{
		TestNum:     "D.3.13",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 Docker 服务器证书密钥文件所有权设置为 root:root",
		Remediation: "",
	},

	"D.3.14": RESTBenchCheck{
		TestNum:     "D.3.14",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 Docker 服务器证书密钥文件权限设置为 400",
		Remediation: "",
	},

	"D.3.15": RESTBenchCheck{
		TestNum:     "D.3.15",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 Docker 套接字文件所有权设置为 root:docker",
		Remediation: "",
	},

	"D.3.16": RESTBenchCheck{
		TestNum:     "D.3.16",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 Docker 套接字文件权限设置为 660 或更多限制",
		Remediation: "",
	},

	"D.3.17": RESTBenchCheck{
		TestNum:     "D.3.17",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 daemon.json 文件所有权设置为 root:root",
		Remediation: "",
	},

	"D.3.18": RESTBenchCheck{
		TestNum:     "D.3.18",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 daemon.json 文件权限设置为 644 或更多限制",
		Remediation: "",
	},

	"D.3.19": RESTBenchCheck{
		TestNum:     "D.3.19",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 /etc/default/docker 文件所有权设置为 root:root",
		Remediation: "",
	},

	"D.3.20": RESTBenchCheck{
		TestNum:     "D.3.20",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 /etc/sysconfig/docker 文件所有权设置为 root:root",
		Remediation: "",
	},

	"D.3.21": RESTBenchCheck{
		TestNum:     "D.3.21",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 /etc/sysconfig/docker 文件权限设置为 644 或更多限制",
		Remediation: "",
	},

	"D.3.22": RESTBenchCheck{
		TestNum:     "D.3.22",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 /etc/default/docker 文件权限设置为 644 或更多限制",
		Remediation: "",
	},

	"D.4.1": RESTBenchCheck{
		TestNum:     "D.4.1",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保已为容器创建用户",
		Remediation: "",
	},

	"D.4.2": RESTBenchCheck{
		TestNum:     "D.4.2",
		Type:        "host",
		Category:    "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保容器只使用可信的基础镜像",
		Remediation: "",
	},

	"D.4.3": RESTBenchCheck{
		TestNum:     "D.4.3",
		Type:        "host",
		Category:    "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保容器中没有安装不必要的包",
		Remediation: "",
	},

	"D.4.4": RESTBenchCheck{
		TestNum:     "D.4.4",
		Type:        "host",
		Category:    "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保图像被扫描并重建以包含安全补丁",
		Remediation: "",
	},

	"D.4.5": RESTBenchCheck{
		TestNum:     "D.4.5",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保已启用 Docker 的内容信任",
		Remediation: "",
	},

	"D.4.6": RESTBenchCheck{
		TestNum:     "D.4.6",
		Type:        "host",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保已将 HEALTHCHECK 指令添加到容器映像",
		Remediation: "",
	},

	"D.4.7": RESTBenchCheck{
		TestNum:     "D.4.7",
		Type:        "host",
		Category:    "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保更新指令不在 Dockerfile 中单独使用",
		Remediation: "",
	},

	"D.4.8": RESTBenchCheck{
		TestNum:     "D.4.8",
		Type:        "host",
		Category:    "docker",
		Scored:      false,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保删除 setuid 和 setgid 权限",
		Remediation: "",
	},

	"D.4.9": RESTBenchCheck{
		TestNum:     "D.4.9",
		Type:        "host",
		Category:    "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保在 Dockerfiles 中使用 COPY 而不是 ADD",
		Remediation: "",
	},

	"D.4.10": RESTBenchCheck{
		TestNum:     "D.4.10",
		Type:        "host",
		Category:    "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保机密未存储在 Dockerfile 中",
		Remediation: "",
	},

	"D.4.11": RESTBenchCheck{
		TestNum:     "D.4.11",
		Type:        "host",
		Category:    "docker",
		Scored:      false,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保只安装经过验证的软件包",
		Remediation: "",
	},

	"D.4.12": RESTBenchCheck{
		TestNum:     "D.4.12",
		Type:        "host",
		Category:    "docker",
		Scored:      false,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保所有签名的工件都经过验证",
		Remediation: "在上传到包注册表之前验证工件签名。",
	},

	"D.6.1": RESTBenchCheck{
		TestNum:     "D.6.1",
		Type:        "host",
		Category:    "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保避免图像蔓延",
		Remediation: "",
	},

	"D.6.2": RESTBenchCheck{
		TestNum:     "D.6.2",
		Type:        "host",
		Category:    "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保避免容器蔓延",
		Remediation: "",
	},

	"D.5.1": RESTBenchCheck{
		TestNum:     "D.5.1",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保启用 AppArmor 配置文件（如果适用）",
		Remediation: "",
	},

	"D.5.2": RESTBenchCheck{
		TestNum:     "D.5.2",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保设置了 SELinux 安全选项（如果适用）",
		Remediation: "",
	},

	"D.5.3": RESTBenchCheck{
		TestNum:     "D.5.3",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 Linux 内核功能在容器内受到限制",
		Remediation: "",
	},

	"D.5.4": RESTBenchCheck{
		TestNum:     "D.5.4",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保不使用特权容器",
		Remediation: "",
	},

	"D.5.5": RESTBenchCheck{
		TestNum:     "D.5.5",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保敏感的主机系统目录未挂载在容器上",
		Remediation: "",
	},

	"D.5.6": RESTBenchCheck{
		TestNum:     "D.5.6",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 sshd 不在容器内运行",
		Remediation: "",
	},

	"D.5.7": RESTBenchCheck{
		TestNum:     "D.5.7",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保特权端口未在容器内映射",
		Remediation: "",
	},

	"D.5.8": RESTBenchCheck{
		TestNum:     "D.5.8",
		Type:        "container",
		Category:    "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保容器上只打开需要的端口",
		Remediation: "",
	},

	"D.5.9": RESTBenchCheck{
		TestNum:     "D.5.9",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保主机的网络名称空间未共享",
		Remediation: "",
	},

	"D.5.10": RESTBenchCheck{
		TestNum:     "D.5.10",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保容器的内存使用是有限的",
		Remediation: "",
	},

	"D.5.11": RESTBenchCheck{
		TestNum:     "D.5.11",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保在容器上正确设置 CPU 优先级",
		Remediation: "",
	},

	"D.5.12": RESTBenchCheck{
		TestNum:     "D.5.12",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保容器的根文件系统挂载为只读",
		Remediation: "",
	},

	"D.5.13": RESTBenchCheck{
		TestNum:     "D.5.13",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保传入的容器流量绑定到特定的主机接口",
		Remediation: "",
	},

	"D.5.14": RESTBenchCheck{
		TestNum:     "D.5.14",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保“失败时”容器重启策略设置为“5”",
		Remediation: "",
	},

	"D.5.15": RESTBenchCheck{
		TestNum:     "D.5.15",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保主机的进程名称空间不共享",
		Remediation: "",
	},

	"D.5.16": RESTBenchCheck{
		TestNum:     "D.5.16",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保主机的 IPC 命名空间未共享",
		Remediation: "",
	},

	"D.5.17": RESTBenchCheck{
		TestNum:     "D.5.17",
		Type:        "container",
		Category:    "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保主机设备不直接暴露给容器",
		Remediation: "",
	},

	"D.5.18": RESTBenchCheck{
		TestNum:     "D.5.18",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "如果需要，确保在运行时覆盖默认的 ulimit",
		Remediation: "",
	},

	"D.5.19": RESTBenchCheck{
		TestNum:     "D.5.19",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保挂载传播模式未设置为共享",
		Remediation: "",
	},

	"D.5.20": RESTBenchCheck{
		TestNum:     "D.5.20",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保主机的 UTS 名称空间未共享",
		Remediation: "",
	},

	"D.5.21": RESTBenchCheck{
		TestNum:     "D.5.21",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保默认的 seccomp 配置文件未禁用",
		Remediation: "",
	},

	"D.5.22": RESTBenchCheck{
		TestNum:     "D.5.22",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保 docker exec 命令不与特权选项一起使用",
		Remediation: "",
	},

	"D.5.23": RESTBenchCheck{
		TestNum:     "D.5.23",
		Type:        "container",
		Category:    "docker",
		Scored:      false,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保 docker exec 命令不与 user=root 选项一起使用",
		Remediation: "",
	},

	"D.5.24": RESTBenchCheck{
		TestNum:     "D.5.24",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 cgroup 的使用得到确认",
		Remediation: "",
	},

	"D.5.25": RESTBenchCheck{
		TestNum:     "D.5.25",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保容器被限制获取额外的权限",
		Remediation: "",
	},

	"D.5.26": RESTBenchCheck{
		TestNum:     "D.5.26",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保在运行时检查容器健康状况",
		Remediation: "",
	},

	"D.5.27": RESTBenchCheck{
		TestNum:     "D.5.27",
		Type:        "container",
		Category:    "docker",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 Docker 命令始终使用最新版本的镜像",
		Remediation: "",
	},

	"D.5.28": RESTBenchCheck{
		TestNum:     "D.5.28",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保使用 PID cgroup 限制",
		Remediation: "",
	},

	"D.5.29": RESTBenchCheck{
		TestNum:     "D.5.29",
		Type:        "container",
		Category:    "docker",
		Scored:      false,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保不使用 Docker 的默认网桥“docker0”",
		Remediation: "",
	},

	"D.5.30": RESTBenchCheck{
		TestNum:     "D.5.30",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保不共享主机的用户命名空间",
		Remediation: "",
	},

	"D.5.31": RESTBenchCheck{
		TestNum:     "D.5.31",
		Type:        "container",
		Category:    "docker",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 Docker 套接字未安装在任何容器内",
		Remediation: "",
	},

	"K.1.1.1": RESTBenchCheck{
		TestNum:     "K.1.1.1",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 API 服务器 pod 规范文件权限设置为 644 或更多限制",
		Remediation: "在主节点上运行以下命令（基于系统上的文件位置）。例如，chmod 644 /etc/kubernetes/manifests/kube-apiserver.yaml",
	},

	"K.1.1.2": RESTBenchCheck{
		TestNum:     "K.1.1.2",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 API 服务器 pod 规范文件所有权设置为 root:root",
		Remediation: "在主节点上运行以下命令（基于系统上的文件位置）。例如，chown root:root /etc/kubernetes/manifests/kube-apiserver.yaml",
	},

	"K.1.1.3": RESTBenchCheck{
		TestNum:     "K.1.1.3",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保控制器管理器 pod 规范文件权限设置为 644 或更多限制",
		Remediation: "在主节点上运行以下命令（基于系统上的文件位置）。例如，chmod 644 /etc/kubernetes/manifests/kube-controller-manager.yaml",
	},

	"K.1.1.4": RESTBenchCheck{
		TestNum:     "K.1.1.4",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保控制器管理器 pod 规范文件所有权设置为 root:root",
		Remediation: "在主节点上运行以下命令（基于系统上的文件位置）。例如，chown root:root /etc/kubernetes/manifests/kube-controller-manager.yaml",
	},

	"K.1.1.5": RESTBenchCheck{
		TestNum:     "K.1.1.5",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保调度程序 pod 规范文件权限设置为 644 或更多限制",
		Remediation: "在主节点上运行以下命令（基于系统上的文件位置）。例如，chmod 644 /etc/kubernetes/manifests/kube-scheduler.yaml",
	},

	"K.1.1.6": RESTBenchCheck{
		TestNum:     "K.1.1.6",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保调度程序 pod 规范文件所有权设置为 root:root",
		Remediation: "在主节点上运行以下命令（基于系统上的文件位置）。例如，chown root:root /etc/kubernetes/manifests/kube-scheduler.yaml",
	},

	"K.1.1.7": RESTBenchCheck{
		TestNum:     "K.1.1.7",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 etcd pod 规范文件权限设置为 644 或更多限制",
		Remediation: "在主节点上运行以下命令（基于系统上的文件位置）。例如，chmod 644 /etc/kubernetes/manifests/etcd.yaml",
	},

	"K.1.1.8": RESTBenchCheck{
		TestNum:     "K.1.1.8",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 etcd pod 规范文件所有权设置为 root:root",
		Remediation: "在主节点上运行以下命令（基于系统上的文件位置）。例如，chown root:root /etc/kubernetes/manifests/etcd.yaml",
	},

	"K.1.1.9": RESTBenchCheck{
		TestNum:     "K.1.1.9",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保容器网络接口文件权限设置为 644 或更多限制",
		Remediation: "在主节点上运行以下命令（基于系统上的文件位置）。例如，chmod 644 <path/to/cni/files>",
	},

	"K.1.1.10": RESTBenchCheck{
		TestNum:     "K.1.1.10",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保容器网络接口文件所有权设置为 root:root",
		Remediation: "在主节点上运行以下命令（基于系统上的文件位置）。例如，chown root:root <path/to/cni/files>",
	},

	"K.1.1.11": RESTBenchCheck{
		TestNum:     "K.1.1.11",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 etcd 数据目录权限设置为 700 或更多限制",
		Remediation: "在 etcd 服务器节点上，从以下命令获取 etcd 数据目录，作为参数 --data-dir 传递：ps -ef | grep etcd 运行以下命令（基于上面找到的 etcd 数据目录）。例如，chmod 700 /var/lib/etcd",
	},

	"K.1.1.12": RESTBenchCheck{
		TestNum:     "K.1.1.12",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 etcd 数据目录所有权设置为 etcd:etcd",
		Remediation: "在 etcd 服务器节点上，从以下命令获取 etcd 数据目录，作为参数 --data-dir 传递：ps -ef | grep etcd 运行以下命令（基于上面找到的 etcd 数据目录）。例如，chown etcd:etcd /var/lib/etcd",
	},

	"K.1.1.13": RESTBenchCheck{
		TestNum:     "K.1.1.13",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 admin.conf 文件权限设置为 644 或更多限制",
		Remediation: "在主节点上运行以下命令（基于系统上的文件位置）。例如，chmod 644 /etc/kubernetes/admin.conf",
	},

	"K.1.1.14": RESTBenchCheck{
		TestNum:     "K.1.1.14",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 admin.conf 文件所有权设置为 root:root",
		Remediation: "在主节点上运行以下命令（基于系统上的文件位置）。例如，chown root:root /etc/kubernetes/admin.conf",
	},

	"K.1.1.15": RESTBenchCheck{
		TestNum:     "K.1.1.15",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 scheduler.conf 文件权限设置为 644 或更多限制",
		Remediation: "在主节点上运行以下命令（基于系统上的文件位置）。例如，chmod 644 /etc/kubernetes/scheduler.conf",
	},

	"K.1.1.16": RESTBenchCheck{
		TestNum:     "K.1.1.16",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 scheduler.conf 文件所有权设置为 root:root",
		Remediation: "在主节点上运行以下命令（基于系统上的文件位置）。例如，chown root:root /etc/kubernetes/scheduler.conf",
	},

	"K.1.1.17": RESTBenchCheck{
		TestNum:     "K.1.1.17",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 controller-manager.conf 文件权限设置为 644 或更多限制",
		Remediation: "在主节点上运行以下命令（基于系统上的文件位置）。例如，chmod 644 /etc/kubernetes/controller-manager.conf",
	},

	"K.1.1.18": RESTBenchCheck{
		TestNum:     "K.1.1.18",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 controller-manager.conf 文件所有权设置为 root:root",
		Remediation: "在主节点上运行以下命令（基于系统上的文件位置）。例如，chown root:root /etc/kubernetes/controller-manager.conf",
	},

	"K.1.1.19": RESTBenchCheck{
		TestNum:     "K.1.1.19",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 Kubernetes PKI 目录和文件所有权设置为 root:root",
		Remediation: "在主节点上运行以下命令（基于系统上的文件位置）。例如，chown -R root:root /etc/kubernetes/pki/",
	},

	"K.1.1.20": RESTBenchCheck{
		TestNum:     "K.1.1.20",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 Kubernetes PKI 证书文件权限设置为 644 或更多限制",
		Remediation: "在主节点上运行以下命令（基于系统上的文件位置）。例如，chmod -R 644 /etc/kubernetes/pki/*.crt",
	},

	"K.1.1.21": RESTBenchCheck{
		TestNum:     "K.1.1.21",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 Kubernetes PKI 密钥文件权限设置为 600",
		Remediation: "在主节点上运行以下命令（基于系统上的文件位置）。例如，chmod -R 600 /etc/kubernetes/pki/*.key",
	},

	"K.1.2.1": RESTBenchCheck{
		TestNum:     "K.1.2.1",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --anonymous-auth 参数设置为 false",
		Remediation: "在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并设置以下参数。 --anonymous-auth=false",
	},

	"K.1.2.2": RESTBenchCheck{
		TestNum:     "K.1.2.2",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保未设置 --basic-auth-file 参数",
		Remediation: "按照文档并配置备用机制进行身份验证。然后，在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并删除 --basic-auth-file=<filename> 参数。",
	},

	"K.1.2.3": RESTBenchCheck{
		TestNum:     "K.1.2.3",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保未设置 --token-auth-file 参数",
		Remediation: "按照文档并配置备用机制进行身份验证。然后，在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并删除 --token-auth-file=<filename> 参数。",
	},

	"K.1.2.4": RESTBenchCheck{
		TestNum:     "K.1.2.4",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --kubelet-https 参数设置为 true",
		Remediation: "在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并删除 --kubelet-https 参数。",
	},

	"K.1.2.5": RESTBenchCheck{
		TestNum:     "K.1.2.5",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保正确设置了 --kubelet-client-certificate 和 --kubelet-client-key 参数",
		Remediation: "按照 Kubernetes 文档并在 apiserver 和 kubelet 之间设置 TLS 连接。然后，在主节点上编辑 API server pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并设置 kubelet 客户端证书和关键参数，如下所示。 --kubelet-client-certificate=<path/to/client-certificate-file> --kubelet-client-key=<path/to/client-key-file>",
	},

	"K.1.2.6": RESTBenchCheck{
		TestNum:     "K.1.2.6",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保正确设置了 --kubelet-certificate-authority 参数",
		Remediation: "按照 Kubernetes 文档设置 apiserver 和 kubelet 之间的 TLS 连接。然后，在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并将 --kubelet-certificate-authority 参数设置为证书颁发机构的 cert 文件的路径。 --kubelet-certificate-authority=<ca-string>",
	},

	"K.1.2.7": RESTBenchCheck{
		TestNum:     "K.1.2.7",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --authorization-mode 参数未设置为 AlwaysAllow",
		Remediation: "在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并将 --authorization-mode 参数设置为 AlwaysAllow 以外的值。一个这样的例子如下。 --授权模式=RBAC",
	},

	"K.1.2.8": RESTBenchCheck{
		TestNum:     "K.1.2.8",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --authorization-mode 参数包括 Node",
		Remediation: "在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并将 --authorization-mode 参数设置为包含 Node 的值。 --authorization-mode=节点，RBAC",
	},

	"K.1.2.9": RESTBenchCheck{
		TestNum:     "K.1.2.9",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --authorization-mode 参数包括 RBAC",
		Remediation: "在master节点上编辑API server pod规范文件/etc/kubernetes/manifests/kube-apiserver.yaml，将--authorization-mode参数设置为包含RBAC的值，例如：--authorization-mode=Node,红十字会",
	},

	"K.1.2.10": RESTBenchCheck{
		TestNum:     "K.1.2.10",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保准入控制插件 EventRateLimit 已设置",
		Remediation: "遵循 Kubernetes 文档并在配置文件中设置所需的限制。然后，编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并设置以下参数。 --enable-admission-plugins=...,EventRateLimit,... --admission-control-config-file=<path/to/configuration/file>",
	},

	"K.1.2.11": RESTBenchCheck{
		TestNum:     "K.1.2.11",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保未设置准入控制插件 AlwaysAdmit",
		Remediation: "在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并删除 --enable-admission-plugins 参数，或将其设置为不包含 AlwaysAdmit 的值。",
	},

	"K.1.2.12": RESTBenchCheck{
		TestNum:     "K.1.2.12",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保准入控制插件 AlwaysPullImages 已设置",
		Remediation: "在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并设置 --enable-admission-plugins 参数以包含 AlwaysPullImages。 --enable-admission-plugins=...,AlwaysPullImages,...",
	},

	"K.1.2.13": RESTBenchCheck{
		TestNum:     "K.1.2.13",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "如果未使用 PodSecurityPolicy，请确保已设置准入控制插件 SecurityContextDeny",
		Remediation: "在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并设置 --enable-admission-plugins 参数以包括 SecurityContextDeny，除非 PodSecurityPolicy 已经到位。 --enable-admission-plugins=...,SecurityContextDeny,...",
	},

	"K.1.2.14": RESTBenchCheck{
		TestNum:     "K.1.2.14",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保准入控制插件 ServiceAccount 已设置",
		Remediation: "按照文档并根据您的环境创建 ServiceAccount 对象。然后，在master节点上编辑API server pod规范文件/etc/kubernetes/manifests/kube-apiserver.yaml，确保--disable-admission-plugins参数设置为不包含ServiceAccount的值。",
	},

	"K.1.2.15": RESTBenchCheck{
		TestNum:     "K.1.2.15",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保准入控制插件 NamespaceLifecycle 已设置",
		Remediation: "编辑主节点上的 API server pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并设置 --disable-admission-plugins 参数以确保它不包含 NamespaceLifecycle。",
	},

	"K.1.2.16": RESTBenchCheck{
		TestNum:     "K.1.2.16",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保准入控制插件 PodSecurityPolicy 已设置",
		Remediation: "按照文档并根据您的环境创建 Pod 安全策略对象。然后，在主节点上编辑 API server pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并将 --enable-admission-plugins 参数设置为包含 PodSecurityPolicy 的值： --enable-admission-plugins =...,PodSecurityPolicy,... 然后重启 API Server。",
	},

	"K.1.2.17": RESTBenchCheck{
		TestNum:     "K.1.2.17",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保准入控制插件 NodeRestriction 已设置",
		Remediation: "按照 Kubernetes 文档并在 kubelet 上配置 NodeRestriction 插件。然后，在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并将 --enable-admission-plugins 参数设置为包含 NodeRestriction 的值。 --enable-admission-plugins=...,NodeRestriction,...",
	},

	"K.1.2.18": RESTBenchCheck{
		TestNum:     "K.1.2.18",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保未设置 --insecure-bind-address 参数",
		Remediation: "在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并删除 --insecure-bind-address 参数。",
	},

	"K.1.2.19": RESTBenchCheck{
		TestNum:     "K.1.2.19",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --insecure-port 参数设置为 0",
		Remediation: "在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并设置以下参数。 --不安全端口=0",
	},

	"K.1.2.20": RESTBenchCheck{
		TestNum:     "K.1.2.20",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --secure-port 参数未设置为 0",
		Remediation: "在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并删除 --secure-port 参数或将其设置为不同的（非零）所需端口。",
	},

	"K.1.2.21": RESTBenchCheck{
		TestNum:     "K.1.2.21",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --profiling 参数设置为 false",
		Remediation: "在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并设置以下参数。 --分析=假",
	},

	"K.1.2.22": RESTBenchCheck{
		TestNum:     "K.1.2.22",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保设置了 --audit-log-path 参数",
		Remediation: "在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并将 --audit-log-path 参数设置为您希望写入审计日志的合适路径和文件，例如：--audit-log-path=/var/log/apiserver/audit.log",
	},

	"K.1.2.23": RESTBenchCheck{
		TestNum:     "K.1.2.23",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --audit-log-maxage 参数设置为 30 或适当",
		Remediation: "在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并将 --audit-log-maxage 参数设置为 30 或适当的天数：--audit-log-最大年龄=30",
	},

	"K.1.2.24": RESTBenchCheck{
		TestNum:     "K.1.2.24",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --audit-log-maxbackup 参数设置为 10 或适当",
		Remediation: "在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并将 --audit-log-maxbackup 参数设置为 10 或适当的值。 --audit-log-maxbackup=10",
	},

	"K.1.2.25": RESTBenchCheck{
		TestNum:     "K.1.2.25",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --audit-log-maxsize 参数设置为 100 或适当",
		Remediation: "在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并将 --audit-log-maxsize 参数设置为适当的大小（以 MB 为单位）。例如，将其设置为 100 MB：--audit-log-maxsize=100",
	},

	"K.1.2.26": RESTBenchCheck{
		TestNum:     "K.1.2.26",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保适当地设置了 --request-timeout 参数",
		Remediation: "编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并根据需要设置以下参数。例如，--request-timeout=300s",
	},

	"K.1.2.27": RESTBenchCheck{
		TestNum:     "K.1.2.27",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --service-account-lookup 参数设置为 true",
		Remediation: "在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并设置以下参数。 --service-account-lookup=true",
	},

	"K.1.2.28": RESTBenchCheck{
		TestNum:     "K.1.2.28",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保正确设置了 --service-account-key-file 参数",
		Remediation: "在主节点上编辑API服务器pod规范文件/etc/kubernetes/manifests/kube-apiserver.yaml，将--service-account-key-file参数设置为服务账户的公钥文件：--service-account -key-file=<文件名>",
	},

	"K.1.2.29": RESTBenchCheck{
		TestNum:     "K.1.2.29",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保正确设置了 --etcd-certfile 和 --etcd-keyfile 参数",
		Remediation: "按照 Kubernetes 文档并在 apiserver 和 etcd 之间设置 TLS 连接。然后，在主节点上编辑API服务器pod规范文件/etc/kubernetes/manifests/kube-apiserver.yaml，设置etcd证书和密钥文件参数。 --etcd-certfile=<路径/到/客户端证书文件> --etcd-keyfile=<路径/到/客户端密钥文件>",
	},

	"K.1.2.30": RESTBenchCheck{
		TestNum:     "K.1.2.30",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保适当设置 --tls-cert-file 和 --tls-private-key-file 参数",
		Remediation: "按照 Kubernetes 文档并在 apiserver 上设置 TLS 连接。然后，在master节点上编辑API server pod规范文件/etc/kubernetes/manifests/kube-apiserver.yaml，设置TLS证书和私钥文件参数。 --tls-cert-file=<path/to/tls-certificate-file> --tls-private-key-file=<path/to/tls-key-file>",
	},

	"K.1.2.31": RESTBenchCheck{
		TestNum:     "K.1.2.31",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --client-ca-file 参数设置适当",
		Remediation: "按照 Kubernetes 文档并在 apiserver 上设置 TLS 连接。然后，在主节点上编辑 API server pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并设置客户端证书授权文件。 --client-ca-file=<路径/到/client-ca-file>",
	},

	"K.1.2.32": RESTBenchCheck{
		TestNum:     "K.1.2.32",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保适当地设置了 --etcd-cafile 参数",
		Remediation: "按照 Kubernetes 文档并在 apiserver 和 etcd 之间设置 TLS 连接。然后，在master节点上编辑API server pod规范文件/etc/kubernetes/manifests/kube-apiserver.yaml，设置etcd证书授权文件参数。 --etcd-cafile=<path/to/ca-file>",
	},

	"K.1.2.33": RESTBenchCheck{
		TestNum:     "K.1.2.33",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保正确设置了 --encryption-provider-config 参数",
		Remediation: "按照 Kubernetes 文档并配置 EncryptionConfig 文件。然后，在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并将 --encryption-provider-config 参数设置为该文件的路径： --encryption-provider-config =</path/to/EncryptionConfig/File>",
	},

	"K.1.2.34": RESTBenchCheck{
		TestNum:     "K.1.2.34",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保正确配置加密提供程序",
		Remediation: "按照 Kubernetes 文档并配置 EncryptionConfig 文件。在此文件中，选择 aescbc、kms 或 secretbox 作为加密提供程序。",
	},

	"K.1.2.35": RESTBenchCheck{
		TestNum:     "K.1.2.35",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 API 服务器仅使用强密码",
		Remediation: "在主节点上编辑 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml 并按如下方式设置以下参数，或设置为这些值的子集。 --tls-密码套件=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256，TLS_ECDHE_RSA_WITH_AES_128_GCM _SHA256，TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305，TLS_ECDHE_RSA_WITH_AES_256_GCM _ SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM _SHA384",
	},

	"K.1.3.1": RESTBenchCheck{
		TestNum:     "K.1.3.1",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保正确设置了 --terminated-pod-gc-threshold 参数",
		Remediation: "在主节点上编辑控制器管理器 pod 规范文件 /etc/kubernetes/manifests/kube-controller-manager.yaml 并将 --terminated-pod-gc-threshold 设置为适当的阈值，例如： --terminated-pod -gc-阈值=10",
	},

	"K.1.3.2": RESTBenchCheck{
		TestNum:     "K.1.3.2",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --profiling 参数设置为 false",
		Remediation: "在主节点上编辑控制器管理器 pod 规范文件 /etc/kubernetes/manifests/kube-controller-manager.yaml 并设置以下参数。 --分析=假",
	},

	"K.1.3.3": RESTBenchCheck{
		TestNum:     "K.1.3.3",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --use-service-account-credentials 参数设置为 true",
		Remediation: "在主节点上编辑 Controller Manager pod 规范文件 /etc/kubernetes/manifests/kube-controller-manager.yaml 以设置以下参数。 --use-service-account-credentials=true",
	},

	"K.1.3.4": RESTBenchCheck{
		TestNum:     "K.1.3.4",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保正确设置了 --service-account-private-key-file 参数",
		Remediation: "在主节点上编辑控制器管理器 pod 规范文件 /etc/kubernetes/manifests/kube-controller-manager.yaml 并将 --service-account-private-key-file 参数设置为服务帐户的私钥文件。 --service-account-private-key-file=<文件名>",
	},

	"K.1.3.5": RESTBenchCheck{
		TestNum:     "K.1.3.5",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保适当地设置了 --root-ca-file 参数",
		Remediation: "在主节点上编辑控制器管理器 pod 规范文件 /etc/kubernetes/manifests/kube-controller-manager.yaml 并将 --root-ca-file 参数设置为证书捆绑文件。 --root-ca-file=<路径/到/文件>",
	},

	"K.1.3.6": RESTBenchCheck{
		TestNum:     "K.1.3.6",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保 RotateKubeletServerCertificate 参数设置为 true",
		Remediation: "在主节点上编辑 Controller Manager pod 规范文件 /etc/kubernetes/manifests/kube-controller-manager.yaml 并设置 --feature-gates 参数以包含 RotateKubeletServerCertificate=true。 --feature-gates=RotateKubeletServerCertificate=true",
	},

	"K.1.3.7": RESTBenchCheck{
		TestNum:     "K.1.3.7",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --bind-address 参数设置为 127.0.0.1",
		Remediation: "在主节点上编辑 Controller Manager pod 规范文件 /etc/kubernetes/manifests/kube-controller-manager.yaml 并确保 --bind-address 参数的值正确。",
	},

	"K.1.4.1": RESTBenchCheck{
		TestNum:     "K.1.4.1",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --profiling 参数设置为 false",
		Remediation: "编辑主节点上的调度程序 pod 规范文件 /etc/kubernetes/manifests/kube-scheduler.yaml 文件并设置以下参数。 --分析=假",
	},

	"K.1.4.2": RESTBenchCheck{
		TestNum:     "K.1.4.2",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --bind-address 参数设置为 127.0.0.1",
		Remediation: "在master节点上编辑Scheduler pod规范文件/etc/kubernetes/manifests/kube-scheduler.yaml，确保--bind-address参数值正确",
	},

	"K.2.1": RESTBenchCheck{
		TestNum:     "K.2.1",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保正确设置了 --cert-file 和 --key-file 参数",
		Remediation: "按照 etcd 服务文档并配置 TLS 加密。然后，在主节点上编辑 etcd pod 规范文件 /etc/kubernetes/manifests/etcd.yaml 并设置以下参数。 --cert-file=</path/to/ca-file> --key-file=</path/to/key-file>",
	},

	"K.2.2": RESTBenchCheck{
		TestNum:     "K.2.2",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --client-cert-auth 参数设置为 true",
		Remediation: "在主节点上编辑 etcd pod 规范文件 /etc/kubernetes/manifests/etcd.yaml 并设置以下参数。 --client-cert-auth=\"true\"",
	},

	"K.2.3": RESTBenchCheck{
		TestNum:     "K.2.3",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --auto-tls 参数未设置为 true",
		Remediation: "在主节点上编辑 etcd pod 规范文件 /etc/kubernetes/manifests/etcd.yaml 并删除 --auto-tls 参数或将其设置为 false。 --auto-tls=false",
	},

	"K.2.4": RESTBenchCheck{
		TestNum:     "K.2.4",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保适当设置 --peer-cert-file 和 --peer-key-file 参数",
		Remediation: "遵循 etcd 服务文档并根据您的 etcd 集群配置对等 TLS 加密。然后，在主节点上编辑 etcd pod 规范文件 /etc/kubernetes/manifests/etcd.yaml 并设置以下参数。 --peer-cert-file=</path/to/peer-cert-file> --peer-key-file=</path/to/peer-key-file>",
	},

	"K.2.5": RESTBenchCheck{
		TestNum:     "K.2.5",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --peer-client-cert-auth 参数设置为 true",
		Remediation: "在主节点上编辑 etcd pod 规范文件 /etc/kubernetes/manifests/etcd.yaml 并设置以下参数。 --peer-client-cert-auth=true",
	},

	"K.2.6": RESTBenchCheck{
		TestNum:     "K.2.6",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --peer-auto-tls 参数未设置为 true",
		Remediation: "在主节点上编辑 etcd pod 规范文件 /etc/kubernetes/manifests/etcd.yaml 并删除 --peer-auto-tls 参数或将其设置为 false。 --peer-auto-tls=false",
	},

	"K.2.7": RESTBenchCheck{
		TestNum:     "K.2.7",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      false,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保 etcd 使用唯一的证书颁发机构",
		Remediation: "遵循 etcd 文档并为 etcd 服务创建专用的证书颁发机构设置。然后，在主节点上编辑 etcd pod 规范文件 /etc/kubernetes/manifests/etcd.yaml 并设置以下参数。 --trusted-ca-file=</path/to/ca-file>",
	},

	"K.3.1.1": RESTBenchCheck{
		TestNum:     "K.3.1.1",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      false,
		Profile:     "Level 2",
		Automated:   false,
		Description: "用户不应使用客户端证书身份验证",
		Remediation: "应实施 Kubernetes 提供的替代机制，例如使用 OIDC 来代替客户端证书。",
	},

	"K.3.2.1": RESTBenchCheck{
		TestNum:     "K.3.2.1",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保创建最小审计策略",
		Remediation: "为您的集群创建审计策略文件。",
	},

	"K.3.2.2": RESTBenchCheck{
		TestNum:     "K.3.2.2",
		Type:        "master",
		Category:    "kubernetes",
		Scored:      false,
		Profile:     "Level 2",
		Automated:   false,
		Description: "确保审计策略涵盖关键的安全问题",
		Remediation: "考虑修改集群上使用的审计策略以至少包含这些项目。",
	},

	"K.4.1.1": RESTBenchCheck{
		TestNum:     "K.4.1.1",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保 kubelet 服务文件权限设置为 644 或更多限制",
		Remediation: "在每个工作节点上运行以下命令（基于系统上的文件位置）。例如，chmod 644 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf",
	},

	"K.4.1.2": RESTBenchCheck{
		TestNum:     "K.4.1.2",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保 kubelet 服务文件所有权设置为 root:root",
		Remediation: "在每个工作节点上运行以下命令（基于系统上的文件位置）。例如，chown root:root /etc/systemd/system/kubelet.service.d/10-kubeadm.conf",
	},

	"K.4.1.3": RESTBenchCheck{
		TestNum:     "K.4.1.3",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保代理 kubeconfig 文件权限设置为 644 或更多限制",
		Remediation: "在每个工作节点上运行以下命令（基于系统上的文件位置）。例如，chmod 644 <代理 kubeconfig 文件",
	},

	"K.4.1.4": RESTBenchCheck{
		TestNum:     "K.4.1.4",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保代理 kubeconfig 文件所有权设置为 root:root",
		Remediation: "在每个工作节点上运行以下命令（基于系统上的文件位置）。例如，chown root:root <代理 kubeconfig 文件>",
	},

	"K.4.1.5": RESTBenchCheck{
		TestNum:     "K.4.1.5",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 kubelet.conf 文件权限设置为 644 或更严格",
		Remediation: "在每个工作节点上运行以下命令（基于系统上的文件位置）。例如，chmod 644 /etc/kubernetes/kubelet.conf",
	},

	"K.4.1.6": RESTBenchCheck{
		TestNum:     "K.4.1.6",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 kubelet.conf 文件所有权设置为 root:root",
		Remediation: "在每个工作节点上运行以下命令（基于系统上的文件位置）。例如，chown root:root /etc/kubernetes/kubelet.conf",
	},

	"K.4.1.7": RESTBenchCheck{
		TestNum:     "K.4.1.7",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保证书颁发机构文件权限设置为 644 或更多限制",
		Remediation: "运行以下命令修改--client-ca-file的文件权限 chmod 644 <filename>",
	},

	"K.4.1.8": RESTBenchCheck{
		TestNum:     "K.4.1.8",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保客户端证书颁发机构文件所有权设置为 root:root",
		Remediation: "运行以下命令修改 --client-ca-file 的所有权。 chown root:root <文件名>",
	},

	"K.4.1.9": RESTBenchCheck{
		TestNum:     "K.4.1.9",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保 kubelet 配置文件的权限设置为 644 或更严格",
		Remediation: "运行以下命令（使用审核步骤中确定的配置文件位置）chmod 644 /var/lib/kubelet/config.yaml",
	},

	"K.4.1.10": RESTBenchCheck{
		TestNum:     "K.4.1.10",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保 kubelet 配置文件所有权设置为 root:root",
		Remediation: "运行以下命令（使用审核步骤中确定的配置文件位置）chown root:root /etc/kubernetes/kubelet.conf",
	},

	"K.4.2.1": RESTBenchCheck{
		TestNum:     "K.4.2.1",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保 anonymous-auth 参数设置为 false",
		Remediation: "如果使用 Kubelet 配置文件，请编辑该文件以将 authentication: anonymous: enabled 设置为 false。如果使用可执行参数，请在每个工作节点上编辑 kubelet 服务文件 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf 并在 KUBELET_SYSTEM_PODS_ARGS 变量中设置以下参数。 --anonymous-auth=false 根据你的系统，重启 kubelet 服务。例如：systemctl daemon-reload systemctl restart kubelet.service",
	},

	"K.4.2.2": RESTBenchCheck{
		TestNum:     "K.4.2.2",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保 --authorization-mode 参数未设置为 AlwaysAllow",
		Remediation: "如果使用 Kubelet 配置文件，请编辑该文件以将 authorization: mode 设置为 Webhook。如果使用可执行参数，请在每个工作节点上编辑 kubelet 服务文件 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf 并在 KUBELET_AUTHZ_ARGS 变量中设置以下参数。 --authorization-mode=Webhook 根据你的系统，重启kubelet服务。例如：systemctl daemon-reload systemctl restart kubelet.service",
	},

	"K.4.2.3": RESTBenchCheck{
		TestNum:     "K.4.2.3",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保 --client-ca-file 参数设置适当",
		Remediation: "如果使用 Kubelet 配置文件，请编辑该文件以将 authentication: x509: clientCAFile 设置为客户端 CA 文件的位置。如果使用命令行参数，请在每个工作节点上编辑 kubelet 服务文件 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf 并在 KUBELET_AUTHZ_ARGS 变量中设置以下参数。 --client-ca-file=<path/to/client-ca-file> 根据您的系统，重启 kubelet 服务。例如：systemctl daemon-reload systemctl restart kubelet.service",
	},

	"K.4.2.4": RESTBenchCheck{
		TestNum:     "K.4.2.4",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保 --read-only-port 参数设置为 0",
		Remediation: "如果使用 Kubelet 配置文件，编辑文件以将 readOnlyPort 设置为 0。如果使用命令行参数，编辑每个工作节点上的 kubelet 服务文件 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf在 KUBELET_SYSTEM_PODS_ARGS 变量中设置以下参数。 --read-only-port=0 根据你的系统，重启 kubelet 服务。例如：systemctl daemon-reload systemctl restart kubelet.service",
	},

	"K.4.2.5": RESTBenchCheck{
		TestNum:     "K.4.2.5",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保 --streaming-connection-idle-timeout 参数未设置为 0",
		Remediation: "如果使用 Kubelet 配置文件，编辑文件以将 streamingConnectionIdleTimeout 设置为 0 以外的值。如果使用命令行参数，编辑 kubelet 服务文件 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf每个工作节点并在 KUBELET_SYSTEM_PODS_ARGS 变量中设置以下参数。 --streaming-connection-idle-timeout=5m 根据你的系统，重启kubelet服务。例如：systemctl daemon-reload systemctl restart kubelet.service",
	},

	"K.4.2.6": RESTBenchCheck{
		TestNum:     "K.4.2.6",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --protect-kernel-defaults 参数设置为 true",
		Remediation: "如果使用 Kubelet 配置文件，请编辑该文件以设置 protectKernelDefaults: true。如果使用命令行参数，请在每个工作节点上编辑 kubelet 服务文件 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf 并在 KUBELET_SYSTEM_PODS_ARGS 变量中设置以下参数。 --protect-kernel-defaults=true 根据您的系统，重启 kubelet 服务。例如：systemctl daemon-reload systemctl restart kubelet.service",
	},

	"K.4.2.7": RESTBenchCheck{
		TestNum:     "K.4.2.7",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --make-iptables-util-chains 参数设置为 true",
		Remediation: "如果使用 Kubelet 配置文件，请编辑该文件以设置 makeIPTablesUtilChains: true。如果使用命令行参数，请在每个工作节点上编辑 kubelet 服务文件 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf 并从 KUBELET_SYSTEM_PODS_ARGS 变量中删除 --make-iptables-util-chains 参数.根据您的系统，重新启动 kubelet 服务。例如：systemctl daemon-reload systemctl restart kubelet.service",
	},

	"K.4.2.8": RESTBenchCheck{
		TestNum:     "K.4.2.8",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保未设置 --hostname-override 参数",
		Remediation: "在每个工作节点上编辑 kubelet 服务文件 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf 并从 KUBELET_SYSTEM_PODS_ARGS 变量中删除 --hostname-override 参数。根据您的系统，重新启动 kubelet 服务。例如：systemctl daemon-reload systemctl restart kubelet.service",
	},

	"K.4.2.9": RESTBenchCheck{
		TestNum:     "K.4.2.9",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      false,
		Profile:     "Level 2",
		Automated:   true,
		Description: "确保 --event-qps 参数设置为 0 或确保适当事件捕获的级别",
		Remediation: "如果使用 Kubelet 配置文件，请编辑该文件以将 eventRecordQPS: 设置为适当的级别。如果使用命令行参数，请在每个工作节点上编辑 kubelet 服务文件 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf 并在 KUBELET_SYSTEM_PODS_ARGS 变量中设置以下参数。根据您的系统，重新启动 kubelet 服务。例如：systemctl daemon-reload systemctl restart kubelet.service",
	},

	"K.4.2.10": RESTBenchCheck{
		TestNum:     "K.4.2.10",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   true,
		Description: "确保适当设置 --tls-cert-file 和 --tls-private-key-file 参数",
		Remediation: "如果使用 Kubelet 配置文件，请编辑该文件以将 tlsCertFile 设置为用于识别此 Kubelet 的证书文件的位置，并将 tlsPrivateKeyFile 设置为相应私钥文件的位置。如果使用命令行参数，请在每个工作节点上编辑 kubelet 服务文件 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf 并在 KUBELET_CERTIFICATE_ARGS 变量中设置以下参数。 --tls-cert-file=<path/to/tls-certificate-file> --tls-private-key-file=<path/to/tls-key-file> 根据您的系统，重新启动 kubelet 服务。例如：systemctl daemon-reload systemctl restart kubelet.service",
	},

	"K.4.2.11": RESTBenchCheck{
		TestNum:     "K.4.2.11",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 --rotate-certificates 参数未设置为 false",
		Remediation: "如果使用 Kubelet 配置文件，请编辑文件以添加行 rotateCertificates: true 或将其完全删除以使用默认值。如果使用命令行参数，请编辑每个工作节点上的 kubelet 服务文件 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf 并从 KUBELET_CERTIFICATE_ARGS 变量中删除 --rotate-certificates=false 参数。根据您的系统，重新启动 kubelet 服务。例如：systemctl daemon-reload systemctl restart kubelet.service",
	},

	"K.4.2.12": RESTBenchCheck{
		TestNum:     "K.4.2.12",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      true,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 RotateKubeletServerCertificate 参数设置为 true",
		Remediation: "在 master 上编辑 /var/lib/kubelet/kubeadm-flags.env 并设置参数 KUBELET_CERTIFICATE_ARGS --feature-gates=RotateKubeletServerCertificate=true 或者作为替代方案，建议作为最后的手段，编辑 kubelet 服务文件 /etc/每个工作节点上的 systemd/system/kubelet.service.d/10-kubeadm.conf 并在 KUBELET_CERTIFICATE_ARGS 变量中设置以下参数。 --feature-gates=RotateKubeletServerCertificate=true 根据您的系统，重启 kubelet 服务。例如：systemctl daemon-reload systemctl restart kubelet.service",
	},

	"K.4.2.13": RESTBenchCheck{
		TestNum:     "K.4.2.13",
		Type:        "worker",
		Category:    "kubernetes",
		Scored:      false,
		Profile:     "Level 1",
		Automated:   false,
		Description: "确保 Kubelet 仅使用强加密密码",
		Remediation: "如果使用 Kubelet 配置文件，编辑文件以设置 TLSCipherSuites：为 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_ WITH_AES_256_GCM_SHA384，TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305，TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384，TLS_RSA_WITH_AES_256_GCM_SHA384，TLS_RSA_WITH_AES_128_GCM_SHA2 56 或这些值的子集。如果使用可执行参数，请在每个工作节点上编辑 kubelet 服务文件 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf 并按如下方式设置 --tls-cipher-suites 参数，或设置为子集这些值。 --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_ SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM _SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256 根据你的系统，重启kubelet服务。例如：systemctl daemon-reload systemctl restart kubelet.service",
	},

}

